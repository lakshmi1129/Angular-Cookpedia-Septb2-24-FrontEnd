             --------------------------------------------------------------------      
                                         MERAN STACK
                   --------------------------------------------------------------------


             ------------------------------------------------------------------------------
                                             HTML - Hyper Text Markup Language
                  ------------------------------------------------------------------------------

                  1. Markup language: It has a set of rules that will define what type of content a document should hold
                  2. HTML: Used to display conenets in web page
                  3. HTML Document: Collection of HTML elements
                        - HTML Element: <starting tag>
                                             content 
                                        <closing tag>
                        -Tag: <> </>
                        - Structure of html: 
                                    <html>
                                        <head>
                                            <title> </title>
                                        </head>
                                        <body>
                                            Content
                                        </body>
                                    </html>
                    4. HTML Latest version -
                           - HTML 5
                    5. Basic Tags -  
                            - Heading Tag - <h1> - <h6>              
                            - paragraph - p tag
                            - image - img
                            - a - link
                            - bold - b , strong tag
                            - italics - em tag
                            - strike - del, s tag
                            - underline - ins tag
                            - highlight - mark tag
                            - Break tag - br tag
                            - Horizontal line - hr tag
                            - Subscript - sub tag
                            - superscript - sup tag
                            - ordered list - ol tag, li tag
                            - unordered list - ul tag, li tag
                            - Description list :  dl tag , dt tag, dd tag
                            - Table : <table>
                                        <thead>
                                            <tr>
                                                <th> </th>
                                                <th> </th>
                                                <th> </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td> </td>
                                            </tr>
                                        </tbody>
                                      </table>
                            - Video : video tag
                            - Container tags:
                                - div tag
                                - article tag
                                - section tag
                            - iframe : Embed contents in a  webpage
                            - form tags : form tag
                               - label tag
                               - input tag - types--text, number, date, email, password
                               - textarea
                               - Buttons

                    6. Tags can be classified according to their display in web browser
                        - Block elements - takes enire width of browser
                            eg: heading tag, p tag
                        - Inline elements - Takes only the width of its content
                            eg: a tag, img tag
                    7. semantic tags :describes its meaning to both browser and developer
                        - header tag <header>
                        - nav tag <nav>
                        - section tag <section>
                        - article tag <article>
                        - aside tag <aside>
                        - footer tag <footer>


             ------------------------------------------------------------------------------
                            CSS- Cascading Style Sheet
             ------------------------------------------------------------------------------

             1. used to give style to HTML elements
             2. Ways to apply CSS in HTML elements
                    - Inline CSS :  use  style attribute
                              syntax: style="property:value;"
                    - Internal CSS : use Style tag
                              styntax:  <style>
                                           selectors{
                                            property:value;
                                           }
                                        </style>
                    - External CSS : Use External CSS file, we have to link the external file with HTML file
                                styntax: 
                                           selectors{
                                            property:value;
                                           }
             3. CSS Selectors: used to select html elements to a css file
                    - use tag name
                    - use id - #
                    - use class - .
                    - use universal selector - *
                    - CSS combinators : 
                        - Grouping selectors - (use commas too seperate each HTML elements)
                        - Descendent selector  - using space 
                        - child selector - > symbol
                        - sibling selector - using ~
                        - Immediate sibling selector - using +
             4.  Box model:      Margin
                                 padding
                                 border
             5. CSS Properties:
                        - float
                        - position
                            - static
                            - fixed
                            - absolute
                            - relative
                            - sticky
                        - Z-index
                        - FlexBox - used to arrange html Elements in either row/column
                            -Flex Container - parent tag which holds elementsto be arranged as row/column, 
                                flex should be applied to parent element
                            - flex-direction
                            - justify-content
                            - align-items
                    - Psedo class: used to define a special state of an element.
                        syntax: selector:pseudo-class {
                                    property: value;
                                    }
                    -Grid: used to display elements in row/column, where user can fix the column width
                        - Grid Container: display as grid
                        - grid-template-colum/row: used to set the width of colum /row
                        - gap: used to set the space between row or column
                        - grid item
                    - linear gradient: is used to set combinations of colors as background
                        -syntax: background-image: linear-gradient(direction, color-stop1, colorstop2)
                    -Animation in css: animation property, to define @keyframes
                        -Animation libraries: https://animate.style/
                        - AOS animation: https://michalsnik.github.io/aos/
                6. website hosting servers: 
                        - netlify   
                        - github pages
                        - vercel
                7. Media Queries: used to create responsive web pages  
                    - Media queries can be used to check many things, such as:
                       - width and height of the viewport
                       - orientation of the viewport (landscape or portrait)
                       - resolution 
                    - @media keyword:
                            @media not|only mediatype and (media feature) and (media feature) {
                                CSS-Code;
                                }
                    - Screen breakpoints:
                            -480px - sm, 760px - md, 992px- lg,1220px -xl

             ------------------------------------------------------------------------------
                  Bootstrap- Its framework of CSS
             ------------------------------------------------------------------------------ 
         1. Used to build fast, responsive sites   
         1. Predefined class of styles, common bootstrap classes
                    - container/ container-fluid
                    - border
                    - color : success- green
                              danger- red
                              warning- orange
                              primary - blue
                              info - sky blue
                              dark - black
                              white - light
                              secondary - grey
                    - margin: m/mt/mb/ms/me - 1/2/3/4/5
                    - padding : p/pt/pb/ps/pe - 1/2/3/4/5
                    - text-color
                    - image: img-fluid
                    - width: w-25/50/75/100
                    - fw-bold/bolder/normal
                    - btn btn-success
                    - grid:
                        -row: maximum divided into 12 equal parts
                        -column:
         

            ------------------------------------------------------------------------------
                   Tailwind CSS
             ------------------------------------------------------------------------------
             -. Rapidly build modern websites without ever leaving your HTML.

             ------------------------------------------------------------------------------
                  Figma
             ------------------------------------------------------------------------------

             ------------------------------------------------------------------------------
                   JAVASCRIPT: Scripting Language
             ------------------------------------------------------------------------------
            1. NODE JS: Is a collection of JS libraries and runtime environment
            2. Extension: .JS
            3. Basic Concepts: 
                - Displaying Contents: console.log(content) method
                - Data types
                    - Number
                    - Text: contents inside single or double quotes
                    - Boolean: true/false
                    - Undefined
                    - object
                - Combining different types of datas in JS
                    - use commas
                    - use concantenation : use +,  converts all content to string
                    -  Template Literals:  which combines different data using back tick symbol ` it uses 
                    ${variable_name}
                - Variable: Used to store datas
                - identifires: Set of rules which defines what name should assign to a Variable
                - Creation of variables: in 3 different Ways
                    -using VAR keyword: syntax - var variableName /var variable_name
                    - using const keyword: Syntax: const variablename = value
                    - Using let keyword:  syntax: let variablename = value

                - Hoisting: Moving a variable declarion to the top of code
                - Difference between different variables in JS
  
                            Var                                       Const                                          let
                    ---------------------------------------------------------------------------------------------------------
                    1. use var keyword                                use const keyword                            use let keyword
                    2. can reassign its value                         can't reassign its value                     cannot reassign its value
                    3. Global Scope                                   Block Scope                                  Block Scope
                    4. Hoisting: is possible with inital value        Hoisting is possible, without inital value   Hoisting is possible, without inital value

                - Operators in JS
                    - Assignment operator: =
                    - Arithemetic operators: / * % ** 
                    - Relational Operators:  > < >= <= == === != return boolean
                    - Logical operators; && || !  return boolean

                            &&                      ||                          !

                        T && T = t                 T || T = T                   T ! F
                        T && F = F                 T || F = T
                        F && T = F                 F || T = T                   F ! T
                        F && F = F                 F || F = F
                    - Increment/ Decrement operators: ++ , --
                    - Short hand operator: += -= *=
                    - Ternary operator: condition ? true execution : false execution
                    - Truthy operator: condition && true execution
                    - spread operator: used to spread an iterating variable to a single array, which uses a symbol ...
                    - REST operator: used to combine rest of the values to a single array, using ...  operator

                - Conditional statements: 
                        if(condition){
                            Statements execute when condition becomes true
                        }
                        else{
                            condition false-  executes statements
                        }
                - switch statements:   Syntax: switch(condition){
                    case answer1: statements
                    break;
                    case answer2: statements
                    break;
                    default: statemenets
                }
            - Looping Statements:  used to repeat same task multiple times
                - while loop: Syntax:
                        1. Initialize a variable
                        2. while(condition using variable){
                            executes when loop condition is true
                        3. Change the value of variable used in condition
                        }
                - for loop: syntax:
                        for(initalize variable;condition using variable;change the variable){
                            loop body excecutes when condition satisfies
                        }
                - break statements: used to break the execution of a loop
                - continue statemenets:  used to skip loop for certain values in a loop
             - Nested loops: A loop inside another loop  
                - outer loop{
                    innerloop{
                        completes execution first
                    }
                }
            - Functions: use to perform a specific task , Hoisting is possible for normal functions.
                - function definition part: define atask to be performed.
                    - syntax: function fun_name(args1,args2.....){
                        function Body where we can define task to be perform
                     }
                - Function call: used to executes function definition
                    -syntax: fun_name(pra1,par2........)
                - return statements: ised to retun executionfrom definition to function call along with value from its definition, return mush define at the end of definition.
                - Types of function:
                        - Predefined functions: ex- Number(), console.log(), math.floor()alert()
                        - Arrow functions: used as an alternative for normal function
                            syntax: var/cost/let function_name = (args,args2....) =>{
                                function body
                            }
                        - Callback function: a function definition inside another function call
                            Syntax: fun_name( ()=>{ fun_body})
                        - Anonymous function / nameless function: are self executing
                        - Recursive functions/ repeating function:  used to perform tasks repeatedly, calling inside, its own definition.
                            -syntax: function func_name(){
                                .....func_name()
                            }
                        - Nested functions: function defining inside another function definition
                        - Closure property:  In nested functions child function can access its parent data
            - Array; Used to store multiple elements to a single variable.
                - Array methods:
                     - push(value): to insert value to an array at the end
                     - unshift(value): to insert value to the starting of an array.
                     - pop(): to delete a value from the end of an array.
                     - shift(): to delete a value from the beginning of an array.
                     - sort(callbackfn):  we can sort as ascending/descending order
                     - forEach(callback fn): its an alternative for for of loop
                     - filter(callbackfn) : create a new array with values satisfying condition applied in the existing array
                     - find(callbackfn) : Return a particular value which satisfies condition applied in existing array.
                     - map(callbackfn): returns a new array by applying certain mapping function to all values in an existing array
                     - reduce(callbackfn): returns a single value either lowest/highest/total
                    - reduceRight(callbackfn): return either first lowest/highest/total 
                    - some(callbackfn): returns a boolean value which based on condition  applied to the existing array, it returns true if ateast one item satisfying the condition
                    - every(callbackfn): returns a boolean value which based on condition  applied to the existing array, it returns true if all items satisfying the condition
                    - flat(depth): returns a array with reduced dimention of an existing array to its depth, if depth is "Infinity" then flat will always  return 1 dimention array
                    - includes(array-item): return a boolean  based on array value present in the existing array or not
                    - indexof(array-value): returns index corresponding to the array item otherwise retuns -1
                    - splice(index, delete_count): return a new array with removed item
                -String methods:
                    - length: gives total number of charecters in string
                    - toUpperCase: convert string to capital letters
                    - toLowerCase: convert string to small letters
                    - substring(starting index, ending index): returns  sub string of given index
                    - slice(starting index, ending index): returns  sub string of given index/ and also remove charecters from end of the string
                    - startsWith(charecter to check): returns boolean , the string starts with given charecter or not
                    - endsWith(charecter to check): returns boolean , the string ends with given charecter or not
                    - split(): used to split words to charecters
                    - includes(substring): retuns boolean value whether it contains substring or not
                    - trim(): used to remove unwanted spaces from starting and ending of a string.

            - Object: used to store data in key- value pairs: {key1:value,key2:value,.....}
                - To access value stored in an object
                    - Bracket notation: objectname["key"]
                    - Dot notation: objectname.key
                - Check whether a key is present in an object or not
                    - use "in" operators, 
                        syntax: "key" in objectName, 
                            returns a boolean 
                    - hasOwnProperty() object method, 
                        objectName.hasOwnProperty("key"), 
                            it will also return a boolean
                - insert a value to an existing object, assign operator
                    - objectname[key] = value / objectName.key = value
                    - Object.assign(destination,source)
                - To update value in an object : use assign operator
                - Object.keys(objectName) : return array of all keys in the existing object
                - Object.values(objectName): return array of all values in the existing object
                - Object.entries(objectName): used to display object as an array
                - delete keyword : to remove a key from object
                - Destructuring  of an object: used to access values without using notations
                    const  {keys1, key2, ....} = objectName
            - Exception/ Runtime errors handling: using try -catch block
            - OOPs: Object oriented programming language
                -  object- Real world entity , used to access class properties/ functions outside a class, to create onject: new classname()
                -  Class - blueprint of an object, can have some properties and methods/ functions, keyword: 'class', function inside a class is known as methods, predefied methods is "constructor" initialized by class properties.
                -  Reference -  linked the properties and functions. keyword: 'this'
                - Features of OOPs:
                    - Inheritance: a class can extend properties/functions defined in another class
                        - Classical inheritance: using keyword 'extends'
                        - Prototype Inheritance: using keyword  '__proto__'
                    - polymorphism: 
                    - Abstraction: 
                    - Encpapsulation:  class

    ------------------------------------------------------------------------------
                   Java script in Front End
    ------------------------------------------------------------------------------
        1. used to provide behaviours to HTML elements
        2. Applying JS to HTML elements:
            - Internal JS: Js code in script tag in the HTMl file
            - External JS:  link external JS file using script tag
        3. DOM (Document object model): tree structure using object corresponding to a webpage
        4.DOM methods:
            - using tag : document.getElementByTagName("tag")
            - using id : document.getElementById("id") /id
            - using class: doment.getElementByClassName("class")
            - using QuerySelector: document.querySelector("tag/#id/.class")
            - using QuerySectorAll: document.querySelectorAll("tag/#id/.class")
        5. Events:  triggered by user action, events occured in HTML elements
                - Mouse related events: Click, drag and drop, double click...
                - Keyboard related events: key press, key up, key down..
                - Touch related events...
        6. Handling events in HTML:  event function call() inside HTMl elements, behaviours change must be define as a function definition.
        7. Access/ update conetent of an HTML Element in JS
            - innerHTML/InnerText property
        8. Permanently store data in browser
            - data will be stored permanently as key-value pairs, type of both key and value must be "string", to convert value to string- use JSON.stringify(value),  to parse string to its original form use, JSON.parse(value)
            - Local storage
                - setitem(key,value) : used to store data to storage
                - getItem(key) :  used to get value from storage
                - removeItem(key) : used to remove item from storage
                - clear() : used to clear storage
            - Session storage:
        9. Working  browser in JS runtime environment
            - JS engines: It handles js execution, convert JS code into code understand by browser engines
                - Call stack: used to keep track of currently executing functions,  make sure each one finishes before moving to next, Only one call stack in JS engine that is why it is known as single threaded programming. 
                     - can handle 2 types of function:
                        - Synchronous functions : functions execute without a delay
                        - Asynchronous functions : Functions execute with delay
                            - Callback functions :  Task queue(Macro task queue)
                            - Web APIs : stored in Micro task queue,  Priority queue
                - Event Loop:  Will manages the flow of the code, ensuring Asyncronous operation and user ineraction run smoothly.
                - Heap: storage for variables and objects in JS
        10. Asyncronous function call in javascript:
                - Call back function: nested function leads to call back hell., they didn't give any responsive
                - Promise :  Used to resolve asyncronous function it will definitly gives a response, 
                    - Promise can resolve 2 states 
                        - Resolved state : used to resolve Asyncronous function call return a response  then that state of promise  is knon as "Resolved state", then method
                        - Reject : used if asyncronous function call return nothing after making the call that state is known as reject state. catch method
                        - Async-Await keywords: To write promise much more easier, to avoid call back functions , if a function is asyncronous then only we can use await inside a function.
                            - Aysnc : makes a function return a promise
                            - Await:  makes a function to wait for a promise

        11. API(Application Programming Interface):  used to comminicate between applictaions through internet.
            - Socket (Web chatting)
            - REST/SOAP - Client-server communication
            - GRAPHQL
          - API testing tools:
            - Postman
            - thunder client: extention of VS code
        12. URL (Universal Resource Locator)
            - ex: https://jsonplaceholder.typicode.com/users/1
                - Base URL : https://jsonplaceholder.typicode.com
                - URI : Universal Resource Identifier eg: users
                - Path Parameter:  Number associated with URI
            - ex: - https://www.google.com/search?q=luminar
                - Query Parameter:  are value after ? in URL
        13. HTTP(Hyper Text Transfer Protocol):  Used to allow application to make request-response via internet.
          - HTTP request: client application will make a request to server
            - 2 parts: 
                - Header:  used to keep secret data
                - Body: Used to hold data (Binary/XML/JSON...) to be transfered from client
            - HTTP methods:
                - GET: get/read data
                - POST: create/store data
                - PATCH : update data partially
                - PUT : Udate data completly
                - DELETE : remove data
          - HTTP response: Server application provides response to client
                - HTTP status code: To get response status of request, browser is using HTTP response status code:
                    - 1XX - Infortational
                    - 2XX - success
                    - 3XX - Redirecting
                    - 4XX - Client errors
                    - 5XX - Server error
        14. JSON(Java Script Object Notation):  is data format used to transfer data from ane application to another using internet
                - data saved as key - value pairs: here "key" must be always string type
                - eg: "password":"abc123", "age": 34
        15. API call in JS:  AJAX(Asyncronous Java Script and XML) : Method to make api call using JS.
            - API cal using "XMLHTTPRequest" XHR
                - XMLHTTPRequest class has predefined methods and properties to make sending request and response between application in internet
                -  Object of XMLHTTPRequest used to interact with server application
                - XMLHTTPRequest class properties:
                    - readyState:  returns a number which indicates state of a request, if readyState == 4 then request receives the response
                    - responseText: Return a string that contain the response to the request as text
                    - status: return response code
                - XMLHTTPRequest class methods:
                    - open() -  initialize /create api request
                    - send() - sending api request
                - Event: 
                    -onreadystatechange : event to occue whenever the value of reasystate changed.
                - Steps to make API call:
                        1. Create an object for XMLHttpRequest class
                        2. Initiate the request using open method
                        3. send request
            - API call using fetch API 
                - fetch()  returns a promise,  then resolved response will get from"then method", reject response get from"catch method"
            - API call using Axios Library: Axios is a promise-based HTTP Client for node.js and the browser. 
            

        16. JS modules : used to trnsfer data from one js file to another
            - export statemenets:  used to share data from one js file to another, can be used in 2 types
                - using export default keyword : this keyword must be at the end of the file.
                - using export keyword :  used to export multiple  data from one js file to another.
            - Import statement :  used to use exported data from another js file
                - with curly braces :   data exportes using 'export keyword'
                - without curly braces :  data exported using 'export default' keyword


    ------------------------------------------------------------------------------
                    React : Advanced Frontend Application Library
    ------------------------------------------------------------------------------ 

    1. Basic concepts of react:
        - React app is a collection of different libraries
        - React app is consists of different components, which are used to display contents in browser. In react app , all components are arranged in a tree structure.
        - Pure JS functions used to build components,  it returns how to display contents in browser. , pure functions are capable of doing one task with help of its arguments.  functions without side effects.
        - Declarative approach 
        - Virtual DOM : Light weight memory representation of real DOM
        - Babel Library :  used to display contents in browser.
        - JSX(JavScript XML) : JS extension for writing html code in javascript, used to display content in browser
            - JSX element : eg: const heading = <h1> Heading1 </h1>
            - Rules for using JSX
                - Every JSX element must be inside a single tag. Parent tag can be only a container tag ( div, article, section...) or react fragments ( <> </>)
                - In jsx we have to use 'camelCase' to write contents : eg: fontSize
                -  Every JSX tag must has a closing tag. If a tag has contents then: 
                <startingTag> content </closingTag>, if tag has no content : <startingTag></closingTag>  or we can use self closing tag         (<starting tag/>) as well
                    - Instead of attribute class use 'className' in jsx
                    - Instead of attribute 'for' use 'htmlFor' in jsx
                    - In jsx, can directly pass js code inside a curly braces , eg: {js code}
    2. React App creation :
        - CRA ( using create-react-app command)
        - Installing vite globally :  tool for building web application     
                - npm i -g create-vite
                - React app creation using vite : npm create vite@latest reactAppName -- --template react
                - to generate build folder to deploy using netlify: npm run build
    3. File and folder structure of react app using vite
        - package.json file : npm comfiguration file for the project
        - package-lock.json file :  used to hold version of dependent package of the project.
        - node_modules folder : used locally store dependent packages of project, we can generate node_modules folder with the help of npm install.
        - public folder :  used to hold data that can be accesses by any part of the project.
        - index.html : entry point of react application, react app will display in index.html file
        - src folder : logic of react app is defined
            - main.jsx file : used to render ( display in browser) react app in html element with id as 'root'
                -createRoot( ) : lets you create root to display react component inside a browser DOM node.
                - css file : used to define style for all components in react app.
                - App.jsx file :  used to create react root component
                - assets folder : used to hold media files used in react project.
    4. Components : used to display content in browser, to create a component js/jsx file  with filename starts with capital letters.
        - 2 ways to create component

            - function based component /Stateless components :  uses JS pure fuctions to build component, function name must be similar to its filename, function returns a jsx code
            - Class based /statefull components : Uses class to create a component, class inherit react component class. render method in class used to return jsx.
                -To create state. It has to call super method in its constructor to get its parent features. state is an object, where we can store value as key-value pairs. update the state use a predefined method setState() pass its argument as updated value of state.
            - life cycle of component:
                - Mounting phase:  putting jsx into DOM
                    - constructor()
                    - getDerivedStateFromProps()
                    - render()
                    - componentDidMount()
                - updating phase: when component get updated
                    - getDerivedStateFromProps()
                    - shouldComponentUpdate() - return boolean
                    - render()
                    - getSnapShotBeforeUpdate() 
                    - componentDidUpdate()
                - Unmounting Phase:  Removing a component from DOM
                    - componentWillUnmount()
            
             class based compoenents                                Functional components
    -------------------------------------------------------------------------------------------------
            1. using class to create, render                   1. using js pure functions, 
            method returns jsx code                                return jsx code
            2. Stateful component                              2. stateless components
            3. Hooks are not used                              3. Hooks are used
            4.  Need constructor to                            4. No need of constructor
            initialize a state
            5.  Life cycle methods are                         5.  Life cycle methods are not available.
             available in class components

    5. Data sharing between react components:
        - Data can be shared from parent to child :  use 'props' object
    6. Props: Is a property of a component. It is an object used to transfer data from parent component to child component, parent data can be shared via child tag attribute. To access parent data in child we have to use 'props'. props used in child component function argument.
    7. Conditional Rendering : Use based on certain condition . rendering jsx elements in browser,  using if-else statements (ternary operator ?:)/ if statements (&& operator)
    8. List in React : use map array method. set key attribute to duplicating JSX element in a list
    9. css Styling in React : Different ways to apply css to JSX elements
            - Inline css : using style attribute to apply style to jsx element, style must be as js object
                - syntax: style ={{cssProperty:value}}
            - External CSS : Define css style in an external css file. Link css file to component file using import statement.  We cannot import css file into variable in component file
                eg: import 'css file path'
            - CSS module file:  file with extension .module.css is known as css"module file", In this we have to define style in class. To use module css file we have to import it to component file.
                - import variableName from 'module csss file path', apply syle in component, we use variableName.className
            
            - Important css styling component libraries:
                -Material UI : npm install @mui/material @emotion/react @emotion/styled
            -  React Bootstrap: npm install react-bootstrap bootstrap,  choose bootstrap theme in order to apply bootstrap properly in react project, use https://bootswatch.com/ for selecting theme. Download bootstrap.min.css file of the theme and add that file inside project src folder.
            import it to  main.jsx
            - Tailwind css : npm install -D tailwindcss postcss autoprefixer, npx tailwindcss init -p for guidlines: https://tailwindcss.com/docs/guides/vite

    10. Event Handling in React :  syntax: event={function call}
            - Binding function without arguments: event ={functionName}
            - Binding function with arguments: event ={()=>function_name(argument)}
            - Binding function with arguments as events : event ={(event)=>functionname(event)}
    11. State in React : Used to store data of a component. when state value changes component will rerender
    12.  Hooks in react:  Predefined methods in react  Used to provide react component features to functional component
        - Rules to call hooks in functional component   
            - Import hook in component file
            - Use hook component call the hook in top level of the component
            - Hook cannot be Conditional
        - Based on features  there are different types of hooks available.
            - Build in hooks
                - useState(initial value) : used to create state in functional component, this hook will return an array of 2 arguments. First one is  the state, second argument : function to update state.  state updating function name should be start with "set"
                - useEffect() - used to apply side effects to the functional component. we can pass side effect in its first argument as call back function, we can also pass an optional dependency argument to decide when to apply side effects in component.
                - useRef(initial value):  is a react hook that lets you reference a value that's not needed for rendering. Initialvalue is optional in useRef hook.  it return an object with "current" key 
                - useParams(): hook will return dynamic value of route associated with a component
                - useSelector(state=>state.reducer-name) : used to select state from store in a component
                - useDispatch(): used to execute an action from a component.
                - useNavigate():  hook used to navigate from one page to another
    13. Form handling in React:  thare are 2 ways to manages data inside the form by a component
        - Controlled components: are components which store form data inside its own state
        - Uncontrolled Components:  components who access form data using its DOM elements reference.
    14. Set up path/url for component in react:   Use package  react-router-dom
        - install : npm i react-router-dom
        - steps to set up path/url for component
            1. Render the entire react app inside "BrowserRouter" component of react-router-dom library, provide this step inside main.jsx file
            2. Inorder to set up path for component, make sure each component must be inside "Routes" component of react-router-dom library, provide this step inside App.jsx file
            3. To set up path for component, use "Route" component of react-router-dom library. route component has attributes like "path" and "element"  inorder to route for component. All route components must be inside Routes component.
        - Dynamic Routing:  we can set up a dynamic/ changing value in a url along : symbol, so react app will understand value along with the : is dynamic part of the URL.
        - To set up page not found url use path as *, its path must be set up at the end of all url in react app.
        


    15. Higher Order componenets(HOC): are components whose props argument will give another component,eg: Route component
    16. Axios in react: 
        -Using Axios Library : install axios -  npm install axios
        - To make http request using axios: axios(config)
            - config: is a predefined object with keys (method,url,data,headers)
        - HTTP response using axios will always return an object with predefined keys(data(server response),status)
        - Create a services folder inside src of your react app
    17. Data sharing between components in react:
        - State Lifting : data sharing is useing props. we will create a state in common parent of data to be shared components. share state updation function on component and state to another component
        - using REDUX library
        - Using Context API


    ------------------------------------------------------------------------------
            Context API -  DATA sharing methods in react
    ------------------------------------------------------------------------------ 
    1. Avoid props drilling while sharing data between components
    2. To share data it uses context of react, with the help of context we can share data inside
    3. Steps to perform data sharing using context API
        - Create a context: use createContext() method in react
        - Use provider of context to share data to the components, , provider value key will help context to share data, we can pass value as object
        - To access context from component: use useContext hook, useContext(context-name) we give data shared via context
    4. create a folder for contexts
        - inside the folder create react component for perform data sharing using Context
        - create context and export it
        - use context provider provide the state as its value to the component children
        - use children props inside the component of react app inside main.jsx file


    ------------------------------------------------------------------------------
                    JSON server creation
    ------------------------------------------------------------------------------ 

    1. Create a server folder to store json file
    2. Create a package.json (npm configuration file) file inside server folder :  use command - npm init -y
    3. Install json-server package in server folder to run json file, use command to install json-server: npm i json-server/ to get stable version use command: npm i json-server@0.17.4
    4. Create json (db.json) file for storing project data.
    5. To run json file and available in browser port use command in server folder : npm json-server db.json


    ------------------------------------------------------------------------------
                    JSON server Deployment using NODE JS
    ------------------------------------------------------------------------------ 

    1. Create a index.js inside server folder
    2. Update sripts key of package.json file with {"start": "node index.js"} and remove test key from it
    3. Create .gitignore file, to add node_modules
    4. Define steps to run db.json file using json-server in index.js
        - import json-server
        - create a srever for media player app in order to run our server app
        - Create a middleware to convert json data to js
        - create a port for executing our app
        - set up path / route db.json file so that client can make the request
        - use middleware , route inside the server
        - run the server using given port 
        - To execute our app we have ti use: node index.js in terminal , so that we can see the output in localhost:3000


    ------------------------------------------------------------------------------
                   REDUX - STATE MANAGEMENT TOOL
    ------------------------------------------------------------------------------ 

        1. A JS library for predictable and maintainable global state management
        2. Redux consists of 2 packages:  npm install @reduxjs/toolkit, npm install react-redux
            -React-Redux  : officially react binding for redux,
            -Redux-toolkit: The official, opinionated, batteries-included toolset for efficient Redux development 
        3. Important API used redux
            - configureStore() :  used to create store for redux.
                - steps to create redux store in react app
                    - create a folder redux  , to define logic in src folder
                    - Inside redux folder create a js file for creating redux store
                - To provide store to our react app use "Provider" component of react-redux. Give this in main.jsx
            - createReducer(): used to create reducers where we can store updated state inside store.
            - createAction(): used to create action where we can define the logic to update state, output of action automatically return to its reducer.
            - createSlice() : used to combine action and reducre in a single file.
                - steps to create slice for react app
                    - create js file for defining slice
            - createAsyncThunk() : used to make asyncronous call in an action in redux. It accept 2 arguments, first is action type string('slicename/actionname'), 2 ns argument is a callback function it can return promise. It output can be 3 different types. 
                    -pending/fullfilled/rejected. 
                    - 'ExtraReducers' in slice can handle promise return action. because it has define different cases to update slice state, based on promise output.
        4. Hooks used in component for managing state using redux
                - useSelector(state=>state.reducer-name) : used to select state from atore in a component
                - useDispatch(): used to execute an action from a component. Hook will return a function that is dispatching an action in its argument when we call the function
                    - action without argument : dispatch-function(actionName())
                    - action with argumant : dispatch-function(actionName(arg1,arg2,...)), to access the argument of action in slice reduce function it uses its second argument which is an object with 2 key , payload and type. payload will give the argumant from action dispatched by a component.




     --------------------------------------------------------------------      
                MONGODB - DATABASE
     --------------------------------------------------------------------
     1. Database used to store and manage data permanently(MySQL,SQL.MSAccess,MongoDB,Oracle,....)
     2.MongoDB : Is a NOSQL database,  data stored as JSON documents({"key":value}), To store multiple json document is known as collection.
     3. Difference between SQL and MongoDB

                                SQL                                MongoDB
                -------------------------------------             ---------------------------------

                1. Relational SQL DBMS                          1. Document Oriented NoSQL db
                2. Data stored in Table, every table mush       2. Data Stored in collections, as JSON document
                have rows and fixed columns.
                3. Uses fixed schema                            3. use dynamic schema
                4. Support rich set of datatypes                4. Limited set of data types
                5. Uses in traditional business app             5. Used in big data and real time apps.
                6. Optimized for complex join and transaction   6. Optimized for scalability and performance
     4. MongoDB in the following environments:
        - MongoDB Atlas : The fully managed service for MongoDB deployments in the cloud
        - MongoDB Enterprise : The subscription-based, self-managed version of MongoDB
        - MongoDB Community : The source-available, free-to-use, and self-managed version of MongoDB
    5. MongoDB Shell, mongosh : is terminal used to write mongodb codes. 
    6. Collection: used to store JSON documents, to name a collection use small letter in its plural form
    7. MongoDB generate a unique value to identify each document in a collection using _id key its value is a hexadecimal number
    8. CRUD Operations performed in MongoDB
        - To get/read single document from mongoDB collection:  use findOne({key:value}) which returns "entire document" when the key and value is present otherwise, a null
        - To get/read all documents from mongoDB collection:  use find() which return the 'all documents" present in collection
        - To insert a single ocument to Mongodb collection: use insertOne({key:value})
        - To insert multiple documents to mongodb collection: use insertMany([{key:value}])
        - To get total count of documents in a collection : use coundDocument()
        - To limit documents while getting from a collection: use limit(count)
        - To skip  documents while getting from a collection: use skip(count)
        -  to sort data while getting from a collection : use sort({key:1:-1})
        - to get document after applying different query statements use $ symbol : $gt/$gte/$lt/$lte/$eq/$neq/$exists/$regex
        -  to update a single document : updateOne({key:value},{$set:{key:value}}), we can update statements: $set/$inc/$push/$pull
        - to update more than one document: updateMany()
        - To delete one document: deleteOne({key:value})
        - to delete multiple documents: use deleteMany([key:value])
    9. Aggregation: used to combine/join two collections in mongodb
        - using $lookup: 
                        {
                            $lookup:
                                {
                                from: <collection to join>,
                                localField: <field from the input documents>,
                                foreignField: <field from the documents of the "from" collection>,
                                as: <output array field>
                                }
                            }



        

        
     --------------------------------------------------------------------      
        SERVERSIDE / BACKEND - used to resolve client/frontend request
     --------------------------------------------------------------------



        Node js: provides a runtime environment for js outside the browser
     ------------------------------------------------------------------------
     1. Is a free open-source, cross-platform runtime environment that lets us to create servers(used to resolve multiple clinet request), web apps, command line tools or scips.
     2. Features:
            - Extremly fast
            - Asyncronous functions
            - Higly scalable
    3.  Node js Global objects: Objects can be accessed throughout node app without importing it , eg: "process" object,"environmental variable' in process used to store system configuration / secret data of an application.

    4. Node js Module system:  used to share data from one file to another file, using "CommonJSModule' system.
        - require("packagename/filepath) : to import data from a file/package
        - module.exports/ exports keyword:  to export data from a file
        - Predefined / built in modules in node js
            - fs module:  to handle file system of a computer
            - http module: used to create http server
            - https module: used to create https server
            - events module: manage userdefined events
            - crypto module: 
    5. Execution model: Event driven , non blocking I/O model, optimized asyncronous task 
    6. API Access: access to system level API (file system, network , process)
    7. Working of node js :  used to resolve client request and send response while working with single thread
        - non blocking I/Object
        - Asyncronous function

    
    
        Express JS : Node js Framework used to server creation
     ------------------------------------------------------------------------

    1. used in client-server application, to create server with node js features
    2. steps to create an express server for resolving client request
        - Create a server folder for server application
        - create package.json file inside server folder, use command: npm init -y
        - update package.json file ' script' key value as the following object,
            {"start":"node index.js"} and remove its test key and value from it.
        - install packages needed to create node server app
            - express package: used to create server - npm i express
            - cors package: used to enable cross origin Resource sharing - npm i cors
            - dotenv package: used to load content .env file into process object - npm i dotenv
            - mongoose package: used to communicate between nodejs app and mongodb
            - jsonwebtoken : used for authorization
            - multer: used for handling form data/multipart data
         - create a .env file in server folder, which used to store environmental variables of a project/app
            - create a .gitignore file in server folder, which is used to store files/folder to be ignored while adding to git
            - Create index.js file to define express server for resolving client request from browser
               - import express, dotenv,cors in index.js file
               - create express server using express package
               - use cors in our server app, to enable data sharing between diffeerent application
               - use express.json() in server app for parsing json data from client request
               - create a port for server app
               - run server app in specified posrt
               - run server app using command: node index.js
               - to resolve http request using express server: express-server-name.httprequest('path,(request,response)=>{
                using response object share server response to client
               })
            - How to set up path/url for resolving client request in server
                - create routes folder in server folder and create a js file inside routes folder for defining path/route corresponding to client request
                    - steps to define path in js file
                        - import express
                        - create an object for express Router class which is capable of routes in server
                        - export object of express Router class
                        - import object of express Router class and use router in server application.
                        - to setup route, syntax: 
                            - RouterObject.httpRequestMethod('path',controller name)
            - To set up controller for server app: used to define the logic to resolve client request 
                - create a controller folder in server app, and create a js file inside it for defining logic to resolve client request
                - export each controller logic from js file
                - import controller in router.js file and use the controller in corresponding request
                - syntax of controller:
                    - controllername=(request,response)=>{using response object share server response to client}
            - To setup database connection from nodejs server
                - create a folder for definin db connection in server folder
                - inside the folder create js file to define connection steps
                    - import mongoose
                    - get db connection string
                    - To connect with MongoDB use connect method of mongoose pass connection string as argument it will return promise
                    - import connection js file in index.js
            - To set up model for communicating node js and mongodb
                    -  create model folder in server folder
                    -  create js file inside the folder for creating model
                        - import mongoose
                        - create schema for model
                        - create model using that schema
                        - export model
            - To set up Authorization using middleware
                - create a folder for middleware in that create a js file
                - use middleware in route before controller
            - To handle multipart-form data request using multer
                - create js file inside middleware folder
                - import multer
                - create "upload" folder in server folder for storing uploaded files
                - define storage object using diskstorage method of multer  in js file
                - created multeri nstance using the storage and export it from that file, use in it route.
            - server has to use express.static('static file/folder path) to export the static file/folder from server


            Mongoose :  NODE JS package for mongodb data modeling
     ------------------------------------------------------------------------
     1. Mongoose is an ODM(Object Data Modeling) library for MongoDb, helps to create and manage Mongodb documents with NodeJS
     2. Install Mongoose in node js app: npm i Mongoose
     3. Schema: A schema defines the structure of your collection documents. A mongoose schema maps directly to a MongoDB C0llection. To create a schema we have to create an object for mongoose "Schema" class
     4. Models take your schema and apply it to each document in its collection. Create model in mongoose, use model method, syntax : model("modelname",schema)
     5. In node js app, controller will communicate with model inorder to manage data in mongo db
     6. CRUD operations in Mongoose
        -  To creating a document using mongoose in MongoDB,  create an object of model with same order of schema, after that we have save the object in order to appear changes in mongodb using save() method .
        - Read/ GEt  document from MongoDB: find(), findOne(),findById()
        - Update a document: updateOne(), updateMany(), findByIdandUpdate(_id of document, update query)
        - delate a document : deleteOne(),deleteMany(), findByIdandDelete(_id of document)
     7. Mongoose Query Helpers: skip(),sort(),limit()....




               JSON WEB TOKEN : NODEJS PACKAGE FOR AUTHORIZATION
    ------------------------------------------------------------------------------ 
    1. install jsonWebtoken library : npm i jsonwebtoken
    2. Token genaration using jwt: sign(payload,password)
        - payload: used to store data inside token creation
    3. Token verify using JWT: verify(token, password) return a response if token is verified else error



          MIDDLEWARE : NODEJS LIBRARY FOR AUTHORIZATION
    ------------------------------------------------------------------------------ 
    1. used to control request: response cycle in server, before resolving a request server can perform any task using (authorization, data format chanching etc...) using middleware
    2. Middleware are function , with 3 arguments, they are request,response, next. here request will give you client request,response object will give response from server to client, next method used to control the request
    3. Middleware can be of 2 types:
        - Application specific middleware: middleware will active for all client request
        - Router specific middleware: middleware will active for only selected route/path.


     MULTER : NODEJS MIDDLEWARE FOR HANDLING MULTIPART/FORM DATA
    ------------------------------------------------------------------------------
    1. Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files.
    2. Multer adds a body object and a file or files object to the request object. The body object contains the values of the text fields of the form, the file or files object contains the files uploaded via the form.
    3. install multer: npm i multer
    4. multer can used to define storage space for uploaded file



    --------------------------------------------------------------------      
                ANGULAR: ADVANCED FRONTEND TECHNOLOGY
    --------------------------------------------------------------------

    1. Open sourced web app framework developed by Google, used to build single page application
    2. Official website: https://angular.dev/
    3. Angular installation:
        - install angular CLI : npm i -g @angular/click
        - To check version of angular: ng v
    3. Angular Project Creation: ng new project-name, choose the style sheet and sripts
        - Run the project: ng serve/ng s inside angukar project folder, to view angular project in browser open : http://localhost:4200/
    5. Angular project Files and folder Structure
        - tsconfig.spec.json, tsconfig.json,tsconfig.app.json files: used for Typescript installation and testing
        - package.json file: npm configuration file
        - package-lock.json: version details of package installed using npm 
        - angular.json : Angular project configuration file
        - node_modules folder: folder is used to hold copies of installed packages using npm in your project
        -  Public folder: can access by all files inside the project
        - src folder: project related contents
            -  styles.css file: Used to style globally to all the html pages
            - main.ts : used to initially render angular components in UI/Browser of the project, entry point file which bootstrap/render root component into html page angular app
            - index.html file: entry point for UI of angular app, only one component selector will there,  thats the root component of angular app.
            - app folder: full angular app related contents
                - app.routes.ts  file: used to define route for each compoenent in angular app. 
                - app.config.ts file: to enable routing / other features in angular app so that all component can use it.
                - App component:  is the root component of angular app, which consists of 4 files,( ts,spec.ts,html,css file)
                    -  ts file considered as component file
                        - selector: used to display a component html view in browser, used selector as a tag in html page
                        - imports array: contents in import array are used in component html page
    6. Decorators in angular: contents along with @ symbol are known as decorators, used provide metadata(data inside another data)
    7. Components: used to display contents in browser
        - to create angular component: ng g c component-name in project terminal
    8. Data binding:  data sharing within the component
        - One way binding: Data  sharing from one file to another at a time
            - ts( component) file to html (view) file
                - Interpolation:  {{ts class property}} inside html page
                - Property Binding: [attribute-name] = " property-name"
            - html to ts file
                - Event Binding(eventname)= "function-call($event)" because $event will give you the event occur in DOM
                -Event Binding using template reference variables: (eventname)="functionName(template reference variable)", set template reference variable "#variableName" to a tag, will give you the tag while binding the function.
        - Two way binding: use ngModel
    9. Angular Directives:  used to modify behaviour of html elements/ attributes/ properties
        - 3 types Directives
            - Component Directives: used to display conenets in html page
                eg:component selector
            - Attribute Directives: used to change style of html elements
                - ngClass: import ngClass in import array of component, used to apply class of style to html elements
            - Structural directives: used to add/remove html elements
                - *ngIf
                - *ngFor
                - *ngSwitch
        - ngModel Directives: used to get values from tag, import "formsModule"  in component import array, to [(ngModel)] ="class property"
        - ngForm Directives: used to get/control properties of form tag
    10. Control Flow Statements:  similar to structural directives,  no need to import  are used in component html view
        - @if,@else,@else if
        - @for
        - @switch
    11. Pipes: used to convert one data to another format
        - syntax: datatobeconverted pipecharecter(|) pipe name [:"options] in html element
        - Different pipes:
            - Built in Pipes: date, currency, lowerCase, uppercase etc....
            - Custom Pipes: use command = ng g p pipe-folder/pipe-name, define logic to transform function
    12. Service: used to share common logic between different component in an angular app
        - create service: ng g s service-folder/service-name
    13. Dependancy Injection: used to access properties/ functions of a class to another class.  DI can be performed only between component and a service or component and predefined class in angular. DI is performed inside the constructor argument of a class.
        - syntax: constructor(access-specifiers variable-name:dependent-class-name){} / const variable = inject(dependednt class name)
    14. Asyncronous function handling in typescript: using "Observable"  to handle asyncronous functions, observable can resolve multiple asyncronous function at a time where as promise can only resolve one function at a time.  Angular RxJs library is used to resolve Asyncronous function.
        - To resolve Observable to get response angular uses "subscribe" method, subscribe method argumanet can be 2 types, 
            -   callback function where its argument will be give you the response. Otherwise we can use 
            -   Object, its : Next key will give the success response and 
                              error key will give error response
    15. API call: use 'HttpClient' class methods will return observable
            - import 'provideHttpClient' in app.config.ts file , also provide the same
    16. Interface:  used to define custom type of a data in project, command: ng g i folder-name/interface-name
    17. Angular component lifeCycle hooks/ methods : we can use hooks inside component without importing 
        - There are 4 life cycle phases
            1. Creation phase: constructor - Runs when Angular instantiates the component.
            2. Change Detection Phase:
                - ngOnInit : Runs once after Angular has initialized all the component's inputs.
                - ngOnChanges: 	Runs every time the component's inputs have changed.
                - ngDoCheck: Runs every time this component is checked for changes.
                - ngAfterContentInit : Runs once after the component's content has been initialized.
                -ngAfterContentChecked: 	Runs every time this component content has been checked for changes.
                - ngAfterViewInit: 	Runs once after the component's view has been initialized
                - ngAfterViewChecked : Runs every time the component's view has been checked for changes.
            3. Rendering Phase:
                - afterNextRender: 	Runs once the next time that all components have been rendered to the DOM.
                - afterRender: 	Runs every time all components have been rendered to the DOM.
            4. Destruction Phase
                - ngOnDestroy: 	Runs once before the component is destroyed.
    18.  Setup path/route for components in Angular
        - Define the path for compoenent inside app.routes.ts file
        - Add component path in routes array as object
            -syntax: { path: "component-path", component: component-name}
        - use  in root component html page inorder to switch pages according to url
        - "routerLink" property used to redirect from one html page to another in angular app without refreshing the page
        - set dynamic routing: use column along with variable of url
        - set up page not found: use path as **
        - To access dynamic values from a url: use ActivatedRoute class
        - In ngModules : set bindToComponentInputs: true in import array of module
    19. Parent -child data sharing
            - parent to child sharing:  Only properties of parent can share with child. To access parent data in child, first child should create property and it uses input decorators, input decorators is used to get data from parent in child.
            - Child to parent data sharing : on;y share events from child to parent, to share events it uses @output decorator
    20. Form Handling
            - Template driven forms: First design in html , assign form data to component properties, use ngForm, ngModel directives to manage template driven forms
            - Model driven Forms: first create model for form inside component class
                ex: Reactive Form: Import "ReactiveFormModule" in component import array, "FormBuilder" class consist of reactive forms building methods. reactive Form consists of 
                    - Form Group: corresponding trouter-outlet selectoro form tag
                    - Form Array: Form inputs to be stored as array
                    - Form Control: used to link html input tag with form group
    21. Modules: which are usedd to group components, not statndalone components they are part of Modules. We can lazy load modules in applications.

        - Lazy Loading in Angular: loading the contsnts of webpages whenever it requires. It used to reduce initial website loading time
        - Generate module in Angular with routing: ng g m module-name --routing
            - create file routing.module.ts: used to set up path/route of the componants inside the module
            - create file module.ts: used to import common packages needed for components inside the module.
        - Generating components inside a module: ng g c module-name/component-name --no-standalone
        - lazy Load a module in angular : Define lazy load steps inside app.routes.ts( root routing) file ,
         use following command:
            - set up lazy loaded path for module in app.routes.ts file:
                {
                    path:"module-path", loadChildren:()=>import('module-path').then(m=>m.module-name)
                }
    22. Styling Libraries in Angular:
            - Angular Material : Material Design components for angular : https://material.angular.io/
                    - Install Angular material: ng add @angular/material
                    - Update style.css file import theme used in material
            - HighCharts: to display charts in angular projects
                    - install package: npm install highcharts-angular highcharts

    23. Route Guards in Angular: Used to protect route from unauthorized access. It controls navigation to a route based on whether the user is authorized or not. 

        - Different guards in angular:
            - Can Activate: it helps in determining whether a route can be activated or not based on a condition.
        -  To add guards to angular: ng g g guards-folder/guardes-name



                


        

































             ------------------------------------------------------------------------------
                      Git and Github
             ------------------------------------------------------------------------------ 
             1.  GIT: used to control version of a code
             2. Git commands: 
                    - git status: use to check status of git in folder
                    - git init: used to create/ initiate git repository in a folder
                    - git add . : used to track all untrackedfiles to git
                    - git commit -m "message" : used to store/save tracked files to git